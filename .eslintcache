[{"D:\\bootcamp 2020\\spacexx\\src\\index.tsx":"1","D:\\bootcamp 2020\\spacexx\\src\\reportWebVitals.ts":"2","D:\\bootcamp 2020\\spacexx\\src\\App.tsx":"3","D:\\bootcamp 2020\\spacexx\\src\\components\\Launch\\Launch.tsx":"4","D:\\bootcamp 2020\\spacexx\\src\\components\\Launch\\index.tsx":"5","D:\\bootcamp 2020\\spacexx\\src\\generated\\graphql.tsx":"6","D:\\bootcamp 2020\\spacexx\\src\\components\\LaunchDetails\\LaunchDetails.tsx":"7","D:\\bootcamp 2020\\spacexx\\src\\components\\LaunchDetails\\index.tsx":"8","D:\\bootcamp 2020\\spacexx\\src\\components\\Navbar\\Navbar.tsx":"9"},{"size":783,"mtime":1612095474605,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1609854172415,"results":"12","hashOfConfig":"11"},{"size":724,"mtime":1612183272403,"results":"13","hashOfConfig":"11"},{"size":2922,"mtime":1612185764600,"results":"14","hashOfConfig":"11"},{"size":479,"mtime":1612106953258,"results":"15","hashOfConfig":"11"},{"size":25626,"mtime":1611767645233,"results":"16","hashOfConfig":"11"},{"size":1293,"mtime":1612186377303,"results":"17","hashOfConfig":"11"},{"size":722,"mtime":1612107092951,"results":"18","hashOfConfig":"11"},{"size":1469,"mtime":1612111692729,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"otn8p9",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"D:\\bootcamp 2020\\spacexx\\src\\index.tsx",[],["42","43"],"D:\\bootcamp 2020\\spacexx\\src\\reportWebVitals.ts",[],"D:\\bootcamp 2020\\spacexx\\src\\App.tsx",[],"D:\\bootcamp 2020\\spacexx\\src\\components\\Launch\\Launch.tsx",[],"D:\\bootcamp 2020\\spacexx\\src\\components\\Launch\\index.tsx",[],"D:\\bootcamp 2020\\spacexx\\src\\generated\\graphql.tsx",[],["44","45"],"D:\\bootcamp 2020\\spacexx\\src\\components\\LaunchDetails\\LaunchDetails.tsx",[],"D:\\bootcamp 2020\\spacexx\\src\\components\\LaunchDetails\\index.tsx",["46"],"import React ,{useEffect} from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport {useLaunchInfoQuery} from '../../generated/graphql';\r\nimport LaunchDetails from './LaunchDetails'\r\n\r\n// interface OwnProps{\r\n//     id:number\r\n// }\r\n\r\nconst LaunchDetailsContainer = () =>{\r\n    let {id}= useParams();\r\n\r\n    const { data, loading, error ,refetch} = useLaunchInfoQuery({\r\n        variables: {id: String(id)},\r\n      });\r\n      useEffect(()=>{\r\n    refetch()\r\n      }\r\n      ,[id])\r\n      \r\n    if (loading){\r\n        <h3>Data is loading</h3>\r\n    }\r\n\r\n    if(error||!data){ \r\n        <h3>There is an error</h3>\r\n    }\r\n    \r\n    return <LaunchDetails data={data}/>\r\n    \r\n}\r\nexport default LaunchDetailsContainer;","D:\\bootcamp 2020\\spacexx\\src\\components\\Navbar\\Navbar.tsx",["47"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport astro from '../../images/astronaut2.jpg'\r\nimport spacex from '../../images/spacex2.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  spacexLogo:{\r\n      width:'400px',\r\n      display:'block',\r\n      textAlign:'center',\r\n      marginLeft:'auto',\r\n      marginRight:'auto'\r\n    },\r\n  astronautLogo:{\r\n      position:'absolute',\r\n    borderRadius:'50%',\r\n    width:'100px',\r\n    height:'74px',\r\n    margin: '20px 0px 0px 21px'\r\n  },\r\n  appbar:{\r\n      height:'74px',\r\n      backgroundColor:'#4c5161'\r\n  }\r\n}));\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <IconButton >\r\n              <img src={astro} alt=\"astronaut\" className={classes.astronautLogo}></img>\r\n          </IconButton>\r\n            <img src={spacex} className={classes.spacexLogo}/> \r\n            <Link to=\"/\">\r\n            <Button variant=\"outlined\" color=\"secondary\">Launches</Button>\r\n            </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":19,"column":8,"nodeType":"56","endLine":19,"endColumn":12,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":46,"column":13,"nodeType":"60","endLine":46,"endColumn":63},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [id, refetch]",{"range":"66","text":"67"},[484,488],"[id, refetch]"]